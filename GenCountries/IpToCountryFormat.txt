This file is Copyright (C) 2017 by denis bider. Terms of use are as follows:

The author permits use of this file free of charge, for any lawful purpose.
No warranty is given or implied. Attribution is NOT required in programs
that merely use this format. Copies and derivative works MUST reproduce,
unmodified, this copyright notice, terms of use, and any change descriptions.
Changes in derivative works are Copyright (C) by their respective authors.
Authors of changes MUST describe all changes accurately below this notice.
Changes to line endings that preserve file meaning MAY be excluded.


Format of the space-optimized countries file generated by GenCountries
======================================================================

The default name of the file is Countries.bin.

The file is in binary format, and comprises sections encoded as streams of bytes.

The following types are used in the encoding:

  byte    - a single byte
  uint32  - a 32-bit integer encoded as 4 bytes, most significant byte first
  TYPE[N] - type TYPE encoded N times consecutively
  string  - a sequence of byte N, followed by byte[N]

Sections also define their own sequence types with the syntax:

  TYPE:
    ...


Section 1: Header
=================

The Header section starts at the beginning of the file. It is encoded as follows:

  byte[4] signature = "GCT1"
  uint32  countriesBytes = size, in bytes, of the Continents and Countries section
  uint32  ip4Bytes = size, in bytes, of the IPv4 Blocks section
  uint32  ip6Bytes = size, in bytes, of the IPv6 Blocks section


Section 2: Continents and Countries
===================================

This section starts immediately after the Header section. It is encoded as follows:

  byte nrContinents - 1..255
  Continent[nrContinents] - first continent (at index 0) is special and is used for unknown locations
  byte nrCountries - 1..255 - maximum encodeable index is 254
  Country[nrCountries] - first country (at index 0) is special and is used for unknown locations

  Continent:
    byte[2] continentCode: "--" if no continent - used for unknown locations
    string  continentName: "[unknown]" if no continent

  Country:
	byte    continentIndex
    byte[2] countryIsoCode: "--" if no country - direct reference to continent
	string  countryName: "[unknown]" if no country - direct reference to continent

Notes:
- Country codes are unique among country codes.
- Continent codes are unique among continent codes.
- However, there may be a country code that is equal to a continent code.
  For example "AF" is used for Afghanistan as a country, or Africa as a continent.


Sections 3 and 4: IPv4 and IPv6 Blocks
======================================

The IPv4 Blocks section immediately follows the Continents and Countries section.
The IPv6 Blocks section immediately follows the IPv4 Blocks section.

Each section is encoded as follows:

  byte nrDictionaryEntries - 1..128
  DictionaryEntry[nrDictionaryEntries]
  uint32 nrBlocks - 1..any
  Block[nrBlocks]

  DictionaryEntry:
    byte sigBits - 1..128
	byte countryIndex - 0..254

The Block type can be any of the following types, distinguished by their encoding:

  Block-Continuation-Dict:
    byte dictionaryIndex - 0..127

  Block-Continuation-Explicit:
    byte encodedSigBits - high bit is set; contains the value: (0x80 | (sigBits - 1))
    byte countryIndex - 0..254

  Block-Start:
    byte encodedSigBits - high bit is set; contains the value: (0x80 | (sigBits - 1))
	byte startBlockMarker = 255
    byte countryIndex - 0..254
    byte ipEncodeParams - contains the value: ((nrCommonPrefixBytes << 5) | nrEncodedBytes)
	byte[nrEncodedBytes] ipAddressMiddleBytes

IP addresses for each block are decoded as follows:

Preserved state:
  ipExpected = expected next IP address for continuation blocks. Initialized to all zeros.

For each block:
  If the block is of type Block-Start:
    If nrCommonPrefixBytes > 0:
      Copy nrCommonPrefixBytes bytes from start of ipLast. This is the start of the IP address.
    Read ipAddressMiddleBytes, append to any common prefix bytes read in previous step.
	If any further bytes are needed to complete the address, set them to all zeros.
	Set ipFirst to the decoded IP address.
  Else, the block is of type Block-Continuation-Dict or Block-Continuation-Explicit:
    Set ipFirst to ipExpected.
  Set ipLast from ipFirst based on sigBits: i.e. set all non-significant bits to 1.
  Set ipExpected to ipLast, incremented in the least significant byte by 1 with carry.
  Repeat for next block.
