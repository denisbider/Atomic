#include "AtIncludes.h"
#include "AtEllipticCurve.h"

namespace At
{

	// EcParams

	EcParams const EcParams::Nistp256 = {
			"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff", 32,
			"\x3f\xff\xff\xff\xc0\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32,
			"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc", 32,
			"\x5a\xc6\x35\xd8\xaa\x3a\x93\xe7\xb3\xeb\xbd\x55\x76\x98\x86\xbc\x65\x1d\x06\xb0\xcc\x53\xb0\xf6\x3b\xce\x3c\x3e\x27\xd2\x60\x4b", 32,
		};



	// EllipticCurve

	void EllipticCurve::CalculateY(MpUInt const& x, bool yOdd, MpUInt& y)
	{
		y = x.PowModS(3, mc_prime).AddM(x.MulM(mc_a)).AddM(mc_b).PowModM(mc_ident, mc_prime);
		bool odd = ((y.GetByte(0) & 1) == 1);
		if (odd != yOdd)
			y = mc_prime.SubM(y);
	}

}
