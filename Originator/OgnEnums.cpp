#include "OgnIncludes.h"

#include "OgnConversions.h"


static_assert(OgnAutoSbmtd::Invalid				== (uint32_t) Imf::AutoSbmtdValue::Invalid,			"");
static_assert(OgnAutoSbmtd::No					== (uint32_t) Imf::AutoSbmtdValue::No,				"");
static_assert(OgnAutoSbmtd::AutoGenerated		== (uint32_t) Imf::AutoSbmtdValue::AutoGenerated,	"");
static_assert(OgnAutoSbmtd::AutoReplied			== (uint32_t) Imf::AutoSbmtdValue::AutoReplied,		"");

static_assert(OgnIpVerPref::None				== IpVerPreference::None,				"");
static_assert(OgnIpVerPref::Ip4					== IpVerPreference::Ip4,				"");
static_assert(OgnIpVerPref::Ip6					== IpVerPreference::Ip6,				"");

static_assert(OgnTlsAssurance::Unknown			== SmtpTlsAssurance::Unknown,			"");
static_assert(OgnTlsAssurance::NoTls			== SmtpTlsAssurance::NoTls,				"");
static_assert(OgnTlsAssurance::Tls_NoHostAuth	== SmtpTlsAssurance::Tls_NoHostAuth,	"");
static_assert(OgnTlsAssurance::Tls_AnyServer	== SmtpTlsAssurance::Tls_AnyServer,		"");
static_assert(OgnTlsAssurance::Tls_DomainMatch	== SmtpTlsAssurance::Tls_DomainMatch,	"");
static_assert(OgnTlsAssurance::Tls_ExactMatch	== SmtpTlsAssurance::Tls_ExactMatch,	"");

static_assert(OgnAuthType::None					== MailAuthType::None,					"");
static_assert(OgnAuthType::UseSuitable			== MailAuthType::UseSuitable,			"");
static_assert(OgnAuthType::AuthPlain			== MailAuthType::AuthPlain,				"");
static_assert(OgnAuthType::AuthCramMd5			== MailAuthType::AuthCramMd5,			"");

static_assert(OgnMsgStatus::NonFinal_Idle		== SmtpMsgStatus::NonFinal_Idle,		"");
static_assert(OgnMsgStatus::NonFinal_Sending	== SmtpMsgStatus::NonFinal_Sending,		"");
static_assert(OgnMsgStatus::Final_Sent			== SmtpMsgStatus::Final_Sent,			"");
static_assert(OgnMsgStatus::Final_Failed		== SmtpMsgStatus::Final_Failed,			"");
static_assert(OgnMsgStatus::Final_Aborted		== SmtpMsgStatus::Final_Aborted,		"");
static_assert(OgnMsgStatus::Final_GivenUp		== SmtpMsgStatus::Final_GivenUp,		"");

static_assert(OgnDeliveryState::None			== SmtpDeliveryState::None,				"");
static_assert(OgnDeliveryState::TempFailure		== SmtpDeliveryState::TempFailure,		"");
static_assert(OgnDeliveryState::PermFailure		== SmtpDeliveryState::PermFailure,		"");
static_assert(OgnDeliveryState::Success			== SmtpDeliveryState::Success,			"");

static_assert(OgnSendStage::None				== SmtpSendStage::None,					"");
static_assert(OgnSendStage::Unknown				== SmtpSendStage::Unknown,				"");
static_assert(OgnSendStage::RelayLookup			== SmtpSendStage::RelayLookup,			"");
static_assert(OgnSendStage::FindMx				== SmtpSendStage::FindMx,				"");
static_assert(OgnSendStage::Connect				== SmtpSendStage::Connect,				"");
static_assert(OgnSendStage::Greeting			== SmtpSendStage::Greeting,				"");
static_assert(OgnSendStage::Cmd_Ehlo			== SmtpSendStage::Cmd_Ehlo,				"");
static_assert(OgnSendStage::Capabilities		== SmtpSendStage::Capabilities,			"");
static_assert(OgnSendStage::Tls					== SmtpSendStage::Tls,					"");
static_assert(OgnSendStage::Cmd_Auth			== SmtpSendStage::Cmd_Auth,				"");
static_assert(OgnSendStage::Cmd_MailFrom		== SmtpSendStage::Cmd_MailFrom,			"");
static_assert(OgnSendStage::Cmd_RcptTo			== SmtpSendStage::Cmd_RcptTo,			"");
static_assert(OgnSendStage::Cmd_Data			== SmtpSendStage::Cmd_Data,				"");
static_assert(OgnSendStage::Content				== SmtpSendStage::Content,				"");
static_assert(OgnSendStage::Cmd_Quit			== SmtpSendStage::Cmd_Quit,				"");

static_assert(OgnSendDetail::None									== SmtpSendDetail::None,									"");
static_assert(OgnSendDetail::Unknown								== SmtpSendDetail::Unknown,									"");
static_assert(OgnSendDetail::RelayLookup_LookupTimedOut				== SmtpSendDetail::RelayLookup_LookupTimedOut,				"");
static_assert(OgnSendDetail::RelayLookup_CouldNotLookup				== SmtpSendDetail::RelayLookup_CouldNotLookup,				"");
static_assert(OgnSendDetail::FindMx_LookupTimedOut					== SmtpSendDetail::FindMx_LookupTimedOut,					"");
static_assert(OgnSendDetail::FindMx_CouldNotLookup					== SmtpSendDetail::FindMx_CouldNotLookup,					"");
static_assert(OgnSendDetail::FindMx_LookupNoResults					== SmtpSendDetail::FindMx_LookupNoResults,					"");
static_assert(OgnSendDetail::FindMx_DomainMatchRequired				== SmtpSendDetail::FindMx_DomainMatchRequired,				"");
static_assert(OgnSendDetail::Connect								== SmtpSendDetail::Connect,									"");
static_assert(OgnSendDetail::Send									== SmtpSendDetail::Send,									"");
static_assert(OgnSendDetail::Reply_PrematureEndOfLine				== SmtpSendDetail::Reply_PrematureEndOfLine,				"");
static_assert(OgnSendDetail::Reply_UnrecognizedCodeFormat			== SmtpSendDetail::Reply_UnrecognizedCodeFormat,			"");
static_assert(OgnSendDetail::Reply_UnrecognizedLineSeparator		== SmtpSendDetail::Reply_UnrecognizedLineSeparator,			"");
static_assert(OgnSendDetail::Reply_InconsistentCode					== SmtpSendDetail::Reply_InconsistentCode,					"");
static_assert(OgnSendDetail::Reply_MaximumLengthExceeded			== SmtpSendDetail::Reply_MaximumLengthExceeded,				"");
static_assert(OgnSendDetail::Reply_CouldNotReceive					== SmtpSendDetail::Reply_CouldNotReceive,					"");
static_assert(OgnSendDetail::Greeting_SessionRefused				== SmtpSendDetail::Greeting_SessionRefused,					"");
static_assert(OgnSendDetail::Greeting_Unexpected					== SmtpSendDetail::Greeting_Unexpected,						"");
static_assert(OgnSendDetail::Ehlo_UnexpectedReply					== SmtpSendDetail::Ehlo_UnexpectedReply,					"");
static_assert(OgnSendDetail::Capabilities_8BitMimeRequired			== SmtpSendDetail::Capabilities_8BitMimeRequired,			"");
static_assert(OgnSendDetail::Capabilities_Size						== SmtpSendDetail::Capabilities_Size,						"");
static_assert(OgnSendDetail::Tls_NotAvailable						== SmtpSendDetail::Tls_NotAvailable,						"");
static_assert(OgnSendDetail::Tls_StartTlsRejected					== SmtpSendDetail::Tls_StartTlsRejected,					"");
static_assert(OgnSendDetail::Tls_Sspi_LikelyDh_TooManyRestarts		== SmtpSendDetail::Tls_Sspi_LikelyDh_TooManyRestarts,		"");
static_assert(OgnSendDetail::Tls_Sspi_InvalidToken_IllegalMsg		== SmtpSendDetail::Tls_Sspi_InvalidToken_IllegalMsg,		"");
static_assert(OgnSendDetail::Tls_Sspi_ServerAuthRequired			== SmtpSendDetail::Tls_Sspi_ServerAuthRequired,				"");
static_assert(OgnSendDetail::Tls_Sspi_Other							== SmtpSendDetail::Tls_Sspi_Other,							"");
static_assert(OgnSendDetail::Tls_Communication						== SmtpSendDetail::Tls_Communication,						"");
static_assert(OgnSendDetail::Tls_RequiredAssuranceNotAchieved		== SmtpSendDetail::Tls_RequiredAssuranceNotAchieved,		"");
static_assert(OgnSendDetail::Auth_AuthCommandNotSupported			== SmtpSendDetail::Auth_AuthCommandNotSupported,			"");
static_assert(OgnSendDetail::Auth_CfgAuthMechNotSupported			== SmtpSendDetail::Auth_CfgAuthMechNotSupported,			"");
static_assert(OgnSendDetail::Auth_NoSuitableAuthMechanism			== SmtpSendDetail::Auth_NoSuitableAuthMechanism,			"");
static_assert(OgnSendDetail::Auth_CfgAuthMechUnrecognized			== SmtpSendDetail::Auth_CfgAuthMechUnrecognized,			"");
static_assert(OgnSendDetail::Auth_Rejected							== SmtpSendDetail::Auth_Rejected,							"");
static_assert(OgnSendDetail::Auth_UnexpectedReply					== SmtpSendDetail::Auth_UnexpectedReply,					"");
static_assert(OgnSendDetail::Auth_UnexpectedCramMd5ChallengeReply	== SmtpSendDetail::Auth_UnexpectedCramMd5ChallengeReply,	"");
static_assert(OgnSendDetail::MailFrom_Rejected						== SmtpSendDetail::MailFrom_Rejected,						"");
static_assert(OgnSendDetail::MailFrom_UnexpectedReply				== SmtpSendDetail::MailFrom_UnexpectedReply,				"");
static_assert(OgnSendDetail::RcptTo_Rejected						== SmtpSendDetail::RcptTo_Rejected,							"");
static_assert(OgnSendDetail::RcptTo_UnexpectedReply					== SmtpSendDetail::RcptTo_UnexpectedReply,					"");
static_assert(OgnSendDetail::Data_Rejected							== SmtpSendDetail::Data_Rejected,							"");
static_assert(OgnSendDetail::Data_UnexpectedReply					== SmtpSendDetail::Data_UnexpectedReply,					"");
static_assert(OgnSendDetail::Content_Rejected						== SmtpSendDetail::Content_Rejected,						"");
static_assert(OgnSendDetail::Content_UnexpectedReply				== SmtpSendDetail::Content_UnexpectedReply,					"");


namespace
{
	OgnResult OgnGetEnumValues(ValueDesc const* values, OgnEnumValues& x)
	{
		ORIGINATOR_FUNC_BEGIN
			x.m_storage = nullptr;
			x.m_nrValues = 0;
			x.m_values = nullptr;

			ValueDesc const* pValue = values;
			size_t count = 0;
			while (pValue->name != nullptr)
			{
				++count;
				++pValue;
			}

			x.m_storage = CoTaskMemAlloc(count * sizeof(OgnEnumValInfo));
			if (!x.m_storage)
				throw std::bad_alloc();

			OnExit freeStorage = [&] { CoTaskMemFree(x.m_storage); x.m_storage = nullptr; };
			OgnEnumValInfo* evi = (OgnEnumValInfo*) x.m_storage;
			size_t i = 0;

			while (values->name != nullptr)
			{
				EnsureThrow(i < count);
				evi[i].m_value = values->value;
				evi[i].m_name = values->name;
				evi[i].m_desc = values->desc;
				++i;
				++values;
			}

			x.m_nrValues = count;
			x.m_values = evi;

			freeStorage.Dismiss();
		ORIGINATOR_FUNC_CLOSE
	}
}	// anon


char const* __cdecl OgnIpVerPref_Name          (uint32_t v)                       { return IpVerPreference::Name(v); }
char const* __cdecl OgnIpVerPref_Desc          (uint32_t v)                       { return IpVerPreference::Desc(v); }
bool        __cdecl OgnIpVerPref_NameToVal     (OgnSeq n, OgnIpVerPref::E& v)     { return IpVerPreference::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnIpVerPref_Values        (OgnEnumValues& x)                 { return OgnGetEnumValues(IpVerPreference::sc_values, x); }

char const* __cdecl OgnTlsAssurance_Name       (uint32_t v)                       { return SmtpTlsAssurance::Name(v); }
char const* __cdecl OgnTlsAssurance_Desc       (uint32_t v)                       { return SmtpTlsAssurance::Desc(v); }
bool        __cdecl OgnTlsAssurance_NameToVal  (OgnSeq n, OgnTlsAssurance::E& v)  { return SmtpTlsAssurance::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnTlsAssurance_Values     (OgnEnumValues& x)                 { return OgnGetEnumValues(SmtpTlsAssurance::sc_values, x); }

char const* __cdecl OgnAuthType_Name           (uint32_t v)                       { return MailAuthType::Name(v); }
char const* __cdecl OgnAuthType_Desc           (uint32_t v)                       { return MailAuthType::Desc(v); }
bool        __cdecl OgnAuthType_NameToVal      (OgnSeq n, OgnAuthType::E& v)      { return MailAuthType::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnAuthType_Values         (OgnEnumValues& x)                 { return OgnGetEnumValues(MailAuthType::sc_values, x); }

char const* __cdecl OgnMsgStatus_Name          (uint32_t v)                       { return SmtpMsgStatus::Name(v); }
char const* __cdecl OgnMsgStatus_Desc          (uint32_t v)                       { return SmtpMsgStatus::Desc(v); }
bool        __cdecl OgnMsgStatus_NameToVal     (OgnSeq n, OgnMsgStatus::E& v)     { return SmtpMsgStatus::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnMsgStatus_Values        (OgnEnumValues& x)                 { return OgnGetEnumValues(SmtpMsgStatus::sc_values, x); }

char const* __cdecl OgnDeliveryState_Name      (uint32_t v)                       { return SmtpDeliveryState::Name(v); }
char const* __cdecl OgnDeliveryState_Desc      (uint32_t v)                       { return SmtpDeliveryState::Desc(v); }
bool        __cdecl OgnDeliveryState_NameToVal (OgnSeq n, OgnDeliveryState::E& v) { return SmtpDeliveryState::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnDeliveryState_Values    (OgnEnumValues& x)                 { return OgnGetEnumValues(SmtpDeliveryState::sc_values, x); }

char const* __cdecl OgnSendStage_Name          (uint32_t v)                       { return SmtpSendStage::Name(v); }
char const* __cdecl OgnSendStage_Desc          (uint32_t v)                       { return SmtpSendStage::Desc(v); }
bool        __cdecl OgnSendStage_NameToVal     (OgnSeq n, OgnSendStage::E& v)     { return SmtpSendStage::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnSendStage_Values        (OgnEnumValues& x)                 { return OgnGetEnumValues(SmtpSendStage::sc_values, x); }

char const* __cdecl OgnSendDetail_Name         (uint32_t v)                       { return SmtpSendDetail::Name(v); }
char const* __cdecl OgnSendDetail_Desc         (uint32_t v)                       { return SmtpSendDetail::Desc(v); }
bool        __cdecl OgnSendDetail_NameToVal    (OgnSeq n, OgnSendDetail::E& v)    { return SmtpSendDetail::NameToValUInt(Seq_FromOgn(n), (uint32_t&) v); }
OgnResult   __cdecl OgnSendDetail_Values       (OgnEnumValues& x)                 { return OgnGetEnumValues(SmtpSendDetail::sc_values, x); }
